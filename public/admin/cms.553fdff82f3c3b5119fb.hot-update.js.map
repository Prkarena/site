{"version":3,"file":"cms.553fdff82f3c3b5119fb.hot-update.js","sources":["webpack:///./src/components/HeaderTop.js","webpack:///./src/templates/SinglePost.js"],"sourcesContent":["import React from 'react';\r\nimport {FaFacebookSquare , FaInstagram , FaLinkedin , FaYoutube , FaMobileAlt  , FaEnvelope } from 'react-icons/fa';\r\nimport './HeaderTop.css';\r\n\r\nconst HeaderTop = ({ data: {settings} }) => { \r\n    \r\n    return(\r\n        <div className='header-top' >\r\n         {console.log(settings)}\r\n                <div className='header-item'>\r\n\r\n                <FaFacebookSquare />\r\n                <FaInstagram/>\r\n                <FaLinkedin/>\r\n                <FaYoutube/>\r\n               \r\n                </div>\r\n                <div className='header-item'>\r\n                <FaMobileAlt/> mobile\r\n                </div>\r\n                <div className='header-item'>\r\n                <FaEnvelope/> Email                \r\n                </div>\r\n\r\n      \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderTop;\r\n\r\n\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    settings: allMarkdownRemark(\r\n        filter: { fields: { contentType: { eq: \"settings\" } } }\r\n        sort: { order: ASC, fields: [frontmatter___title] }\r\n      ) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n                section1\r\n                section2\r\n                title\r\n                subtitle\r\n                phone\r\n                email\r\n            }\r\n          }\r\n        }\r\n    }\r\n  }\r\n`\r\n","import React, { Fragment } from 'react'\r\nimport _get from 'lodash/get'\r\nimport _format from 'date-fns/format'\r\nimport { Link, graphql } from 'gatsby'\r\nimport { ChevronLeft } from 'react-feather'\r\n\r\nimport Content from '../components/Content'\r\nimport Layout from '../components/Layout'\r\nimport './SinglePost.css'\r\n\r\nexport const SinglePostTemplate = ({\r\n  title,\r\n  date,\r\n  body,\r\n  nextPostURL,\r\n  prevPostURL,\r\n  categories = []\r\n}) => (\r\n  <main>\r\n    <article\r\n      className=\"SinglePost section light\"\r\n      itemScope\r\n      itemType=\"http://schema.org/BlogPosting\"\r\n    >\r\n      <div className=\"container skinny\">\r\n        <Link className=\"SinglePost--BackButton\" to=\"/blog/\">\r\n          <ChevronLeft /> BACK\r\n        </Link>\r\n        <div className=\"SinglePost--Content relative\">\r\n          <div className=\"SinglePost--Meta\">\r\n            {date && (\r\n              <time\r\n                className=\"SinglePost--Meta--Date\"\r\n                itemProp=\"dateCreated pubdate datePublished\"\r\n                date={date}\r\n              >\r\n                {_format(date, 'MMMM Do, YYYY')}\r\n              </time>\r\n            )}\r\n            {categories && (\r\n              <Fragment>\r\n                <span>|</span>\r\n                {categories.map((cat, index) => (\r\n                  <span\r\n                    key={cat.category}\r\n                    className=\"SinglePost--Meta--Category\"\r\n                  >\r\n                    {cat.category}\r\n                    {/* Add a comma on all but last category */}\r\n                    {index !== categories.length - 1 ? ',' : ''}\r\n                  </span>\r\n                ))}\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n\r\n          {title && (\r\n            <h1 className=\"SinglePost--Title\" itemProp=\"title\">\r\n              {title}\r\n            </h1>\r\n          )}\r\n\r\n          <div className=\"SinglePost--InnerContent\">\r\n            <Content source={body} />\r\n          </div>\r\n\r\n          <div className=\"SinglePost--Pagination\">\r\n            {prevPostURL && (\r\n              <Link\r\n                className=\"SinglePost--Pagination--Link prev\"\r\n                to={prevPostURL}\r\n              >\r\n                Previous Post\r\n              </Link>\r\n            )}\r\n            {nextPostURL && (\r\n              <Link\r\n                className=\"SinglePost--Pagination--Link next\"\r\n                to={nextPostURL}\r\n              >\r\n                Next Post\r\n              </Link>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </article>\r\n  </main>\r\n)\r\n\r\n// Export Default SinglePost for front-end\r\nconst SinglePost = ({ data: { post, allPosts } }) => {\r\n  const thisEdge = allPosts.edges.find(edge => edge.node.id === post.id)\r\n  return (\r\n    <Layout\r\n      meta={post.frontmatter.meta || false}\r\n      title={post.frontmatter.title || false}\r\n    >\r\n      <SinglePostTemplate\r\n        {...post}\r\n        {...post.frontmatter}\r\n        body={post.html}\r\n        nextPostURL={_get(thisEdge, 'next.fields.slug')}\r\n        prevPostURL={_get(thisEdge, 'previous.fields.slug')}\r\n      />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default SinglePost\r\n\r\nexport const pageQuery = graphql`\r\n  ## Query for SinglePost data\r\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\r\n  ## $id is processed via gatsby-node.js\r\n  ## query name must be unique to this file\r\n  query SinglePost($id: String!) {\r\n    post: markdownRemark(id: { eq: $id }) {\r\n      ...Meta\r\n      html                                                    \r\n      id\r\n      frontmatter {\r\n        title\r\n        template\r\n        subtitle\r\n        date\r\n        categories {\r\n          category\r\n        }\r\n      }\r\n    }\r\n\r\n    allPosts: allMarkdownRemark(\r\n      filter: { fields: { contentType: { eq: \"posts\" } } }\r\n      sort: { order: DESC, fields: [frontmatter___date] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n        }\r\n        next {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n        previous {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAIA;;;;;;;;;;;;AA7BA;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlEA;AACA;AAgFA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;AArGA;AAiFA;AAoBA;;;;;;;;;;A","sourceRoot":""}